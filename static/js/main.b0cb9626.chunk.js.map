{"version":3,"sources":["components/Header.js","context/CategoriesContext.js","context/RecipesContext.js","components/Form.js","context/ModalContext.js","components/Recipe.js","components/RecipesList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriesContext","createContext","CategoriesProvider","props","useState","categories","setCategories","useEffect","a","Axios","data","drinks","fetchData","Provider","value","children","RecipesContext","RecipesProvider","recipes","setRecipes","name","category","searchRecipes","setSearchRecipes","query","setQuery","url","res","Form","search","setSearch","useContext","getRecipesData","e","target","onSubmit","preventDefault","onChange","type","placeholder","map","c","i","key","strCategory","ModalContext","ModalProvider","idRecipe","setIdRecipe","information","setRecipe","getRecipe","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Recipe","recipe","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredients","push","showIngredients","RecipesList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0cb9626.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <header className=\"bg-alert\">\r\n            <h1>Search Drink's Recipes</h1>\r\n        </header>   \r\n     );\r\n}\r\n \r\nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport const CategoriesContext = createContext();\r\n\r\nconst CategoriesProvider = (props) => {\r\n\r\n    const [ categories, setCategories ] = useState([]);\r\n\r\n    useEffect( () => {\r\n        const fetchData = async () => {\r\n            const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list';\r\n            const categories = await Axios(url);\r\n            setCategories(categories.data.drinks);\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    return (\r\n        <CategoriesContext.Provider\r\n            value={{\r\n                categories\r\n            }}\r\n        >\r\n            {props.children}\r\n        </CategoriesContext.Provider>\r\n    );\r\n}\r\n\r\nexport default CategoriesProvider;","import React, { createContext, useState, useEffect } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport const RecipesContext = createContext();\r\n\r\nconst RecipesProvider = (props) => {\r\n\r\n    const [recipes, setRecipes] = useState([])\r\n    const [searchRecipes, setSearchRecipes] = useState({\r\n        name: '',\r\n        category: ''\r\n    });\r\n    const [ query, setQuery ] = useState(false);\r\n\r\n    const { name, category } = searchRecipes;\r\n\r\n    useEffect( () => {\r\n        if(query){\r\n            const fetchData = async () => {\r\n                const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${name}&c=${category}`\r\n                const res = await Axios(url);\r\n                setRecipes(res.data.drinks);\r\n            }\r\n            fetchData();\r\n        }\r\n    }, [searchRecipes, category, name, query])\r\n\r\n    return ( \r\n        <RecipesContext.Provider\r\n            value={{\r\n                recipes,\r\n                setSearchRecipes,\r\n                setQuery\r\n            }}\r\n        >\r\n            {props.children}\r\n        </RecipesContext.Provider>\r\n\r\n     );\r\n}\r\n \r\nexport default RecipesProvider;","import React, { useContext, useState } from 'react';\r\nimport { CategoriesContext } from '../context/CategoriesContext';\r\nimport { RecipesContext } from '../context/RecipesContext';\r\n\r\nconst Form = () => {\r\n\r\n    const [search, setSearch] = useState({\r\n        name: '',\r\n        category: ''\r\n    });\r\n\r\n    const { categories } = useContext(CategoriesContext);\r\n    const {setSearchRecipes, setQuery} = useContext(RecipesContext);\r\n\r\n    const getRecipesData = e => {\r\n        setSearch({\r\n            ...search,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            className=\"col-12\"\r\n            onSubmit={ e => {\r\n                e.preventDefault();\r\n                setSearchRecipes(search);\r\n                setQuery(true);\r\n            }}\r\n        >\r\n            <fieldset className=\"text-center\">\r\n                <legend>Search drinks by Category or Ingredient</legend>\r\n            </fieldset>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <input\r\n                        onChange={getRecipesData}\r\n                        name=\"name\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search by ingredient\"\r\n                    ></input>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <select\r\n                        onChange={getRecipesData}\r\n                        className=\"form-control\"\r\n                        name=\"category\"\r\n                    >\r\n                        <option value=\"\">Select Category</option>\r\n                        {categories.map( (c,i) => (\r\n                            <option key={i} value={c.strCategory}>{c.strCategory}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        value=\"Search drinks\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Form;","import React, { createContext, useEffect, useState } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport const ModalContext = createContext();\r\n\r\nconst ModalProvider = (props) => {\r\n\r\n    const [ idRecipe, setIdRecipe] = useState(null);\r\n    const [ information, setRecipe ] = useState({});\r\n\r\n    useEffect( () => {\r\n        const getRecipe = async () => {\r\n            if(!idRecipe) return;\r\n            const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idRecipe}`\r\n            const res = await Axios(url);\r\n            setRecipe(res.data.drinks[0]);\r\n        }\r\n        getRecipe();\r\n    }, [idRecipe])\r\n\r\n    return (\r\n        <ModalContext.Provider\r\n            value={{\r\n                information,\r\n                setIdRecipe,\r\n                setRecipe\r\n            }}\r\n        >\r\n            {props.children}\r\n        </ModalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ModalProvider;","import React, { useContext, useState } from 'react';\r\nimport { ModalContext } from '../context/ModalContext';\r\n\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nfunction getModalStyle() {\r\n    const top = 50 ;\r\n    const left = 50;\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 450,\r\n      backgroundColor: theme.palette.background.paper,\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\n\r\nconst Recipe = ({recipe}) => {\r\n\r\n    // Modal configuration of Material-ui\r\n    const [ modalStyle ] = useState(getModalStyle);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const classes = useStyles();\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const { information, setIdRecipe, setRecipe } = useContext(ModalContext);\r\n\r\n    const showIngredients = information => {\r\n        let ingredients = [];\r\n        for(let i=1; i<16; i++){\r\n            if(information[`strIngredient${i}`]){\r\n                ingredients.push(\r\n                <li>{information[`strIngredient${i}`] } ~ { information[`strMeasure${i}`] } </li>\r\n                )\r\n            }\r\n        }\r\n        return ingredients;\r\n    }\r\n\r\n    return ( \r\n        <div className=\"col-md-4 mb-3\">\r\n            <div className=\"card\">\r\n                <h2 className=\"card-header\">{recipe.strDrink}</h2>\r\n\r\n                <img className=\"card-img-top\" src={recipe.strDrinkThumb} alt={`${recipe.strDrink}`} />\r\n\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        onClick={ () => {\r\n                            setIdRecipe(recipe.idDrink)\r\n                            handleOpen();\r\n                        } }\r\n                        type=\"button\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                    >See Recipe\r\n                    </button>\r\n\r\n                    <Modal\r\n                        open={open}\r\n                        onClose={ () => {\r\n                            handleClose();\r\n                            setIdRecipe(null);\r\n                            setRecipe({});\r\n                        }}\r\n                    >\r\n                        <div style={modalStyle} className={classes.paper}>\r\n                            <h2>{information.strDrink}</h2>\r\n                            <h3 className=\"mt-2 text-center\">Instructions:</h3>\r\n                            <p className=\"m-0\">\r\n                                {information.strInstructions}\r\n                            </p>\r\n                            <img className=\"img-fluid my-1\" src={information.strDrinkThumb} alt={information.strDrink}/>\r\n                            <h3 className=\"text-center\">Ingredients & Measures</h3>\r\n                            <ul>\r\n                                {showIngredients(information)}\r\n                            </ul>\r\n                        </div>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Recipe;","import React, { useContext } from 'react';\r\nimport Recipe from './Recipe';\r\n\r\nimport { RecipesContext } from '../context/RecipesContext';\r\n\r\nconst RecipesList = () => {\r\n\r\n    const {recipes} = useContext(RecipesContext);\r\n\r\n    return ( \r\n        <div className=\"row mt-5\">\r\n            {recipes.map(recipe => (\r\n                <Recipe\r\n                    key={recipe.idDrink}\r\n                    recipe={recipe}\r\n                />\r\n            ))}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default RecipesList;","import React from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport RecipesList from './components/RecipesList';\n\nimport CategoriesProvider from './context/CategoriesContext';\nimport RecipesContext from './context/RecipesContext';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n    <CategoriesProvider>\n      <RecipesContext>\n        <ModalProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Form />\n            </div>\n            <RecipesList />\n          </div>\n        </ModalProvider>\n      </RecipesContext>\n    </CategoriesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}